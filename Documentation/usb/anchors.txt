What is anchor?
anchor란 무엇인가?
===============

A USB driver needs to support some callbacks requiring
a driver to cease all IO to an interface. To do so, a
driver has to keep track of the URBs it has submitted
to know they've all completed or to call usb_kill_urb
for them. The anchor is a data structure takes care of
keeping track of URBs and provides methods to deal with
multiple URBs.

USB 드라이버는 드라이버로 하여금 인터페이스에게 모든 IO를 중지하도록 요청
하는 콜백을 지원할 필요가 있습니다. 그렇게 하기 위해, 드라이버는 완료되었는
지 알거나 usb_kill_urb를 호출할 URB들을 파악하고 있어야 합니다. Anchor
는 URB를 유지하는데 책임이 있고 복수의 URB을 다루는 방법을 제공하는 자료
구조입니다. 

Allocation and Initialisation
메모리 할당과 초기화
=============================

There's no API to allocate an anchor. It is simply declared
as struct usb_anchor. init_usb_anchor() must be called to
initialise the data structure.

anchor를 할당하는 API는 없습니다. 단지 struct usb_anchor로 선언돼
야 하죠. init_usb_anchor()는 반드시 이 자료 구조를 초기화 하기 위해 호출 
되어야 합니다. 

Deallocation
메모리 반환
============

Once it has no more URBs associated with it, the anchor can be
freed with normal memory management operations.

포함된 URB가 더 이상 없으면, anchor는 일반적인 메모리 관리 동작으로 해제 될 수
있습니다.

Association and disassociation of URBs with anchors
URB의 anchor와의 포함과 분리 
===================================================

An association of URBs to an anchor is made by an explicit
call to usb_anchor_urb(). The ` is maintained until
an URB is finished by (successful) completion. Thus disassociation
is automatic. A function is provided to forcibly finish (kill)
all URBs associated with an anchor.
Furthermore, disassociation can be made with usb_unanchor_urb()

ahchor로의 URB의 포함은 usb_anchor_urb를 명시적으로 호출함으로서 이루어집니다.
이 연결은 URB가 (성공적인) 완료로 끝날 때 까지 유지됩니다. 따라서 분리는 자동적입니
다. ahchor에 포함된 모든 URB를 강제적으로 끝내는 (끄는) 함수가 하나 있습니다.
더구나, usb_unanchor_usb()로 분리 됩니다.

Operations on multitudes of URBs
다수의 URB에 관련된 동작들
================================

usb_kill_anchored_urbs()
------------------------

This function kills all URBs associated with an anchor. The URBs
are called in the reverse temporal order they were submitted.
This way no data can be reordered.

이 함수는 anchor에 속한 모든 URB를 끕니다. URB들은 등록된 역순으로 호출되죠.
이렇게해서 어떤 데이터도 재배열될 수 없습니다. 

usb_unlink_anchored_urbs()
--------------------------

This function unlinks all URBs associated with an anchor. The URBs
are processed in the reverse temporal order they were submitted.
This is similar to usb_kill_anchored_urbs(), but it will not sleep.
Therefore no guarantee is made that the URBs have been unlinked when
the call returns. They may be unlinked later but will be unlinked in
finite time.

이 함수는 anchor에 속한 모둔 URB를 언링크 시킵니다. URB들은 등록된 역순으로 처리됩니다.
이것은 usb_kill_anchored_urbs()와 비슷하지만, 슬립에 빠지지 않습니다. 그러므로 이 
함수가 리턴되었을 때 언링크 되었다고 보장하지 않습니다. 좀 이따 언링크 될지도 모르지만
한정된 시간안에 언링크 될 겁니다. 

usb_scuttle_anchored_urbs()
---------------------------

All URBs of an anchor are unanchored en masse.
anchor의 모든 URB를 대량으로 unanchor 합니다. 

usb_wait_anchor_empty_timeout()
-------------------------------

This function waits for all URBs associated with an anchor to finish
or a timeout, whichever comes first. Its return value will tell you
whether the timeout was reached.

이 함수는 anchor에 속한 모든 URB가 종료되든 타임아웃이 되든, 먼저 오는 놈이 될 때까지 
대기합니다. 리턴 값은 타임아웃인지 종료가 되었는지 말해 줄 겁니다. 

usb_anchor_empty()
------------------

Returns true if no URBs are associated with an anchor. Locking
is the caller's responsibility.

anchor에 속한 URB가 없으면 true를 반환합니다. caller는 락을 걸어줘야 합니다.


usb_get_from_anchor()
---------------------

Returns the oldest anchored URB of an anchor. The URB is unanchored
and returned with a reference. As you may mix URBs to several
destinations in one anchor you have no guarantee the chronologically
first submitted URB is returned.

가장 오랫동안 anchor에 포함된 URB를 리턴합니다. URB는 unanchor 되고 참조를 반환합
니다. 하나의 anchor를 여러 목적지로 URB를 섞을 수도 있습니다만 연대기적으로 맨 처음에
등록된 URB가 반환될 거라는 보장은 없습니다. 
